# https://taskfile.dev

version: '3'

dotenv:
  - '.env'

env:
  GOEXPERIMENT: arenas

vars:
  VERSION:
    sh: cat ../node/config/version.go | grep -A 1 "func GetVersion() \[\]byte {" | grep -Eo '0x[0-9a-fA-F]+' | xargs printf "%d.%d.%d"
  MAX_KEY_ID: 15
  QUILIBRIUM_SIGNERS_IMAGE_NAME: 'quilibrium-signers'
  QUILIBRIUM_SIGNERS_IMAGE_VERSION: '0.0.1'

tasks:
  status:
    desc: Display configuration info.
    cmds:
      - echo -n "Version       :" && echo " {{.VERSION}}"
      - echo -n "Priv Key Path :" && echo " {{.SIGNING_KEY_PATH}}"
      - echo -n "Pub  Key Path :" && echo " {{.SIGNING_PUB_KEY_PATH}}"
      - echo -n "Key ID        :" && echo " {{.SIGNING_KEY_ID}}"
      - echo -n "PEM Dir       :" && echo " {{.SIGNING_KEYS_PEM_DIR}}"
    silent: true

  hex:
    desc: Print the hex representation of your public key.
    cmds:
      - cat {{.SIGNING_PUB_KEY_PATH}} | openssl ec -inform pem -pubin -noout -text

  docker:build_image:
    desc: Build the Quilibrium Signers docker image, unless it is already built.
    aliases:
      - image
    cmds:
      - |
        docker build \
        -t {{.QUILIBRIUM_SIGNERS_IMAGE_NAME}}:{{.QUILIBRIUM_SIGNERS_IMAGE_VERSION}} \
        -t {{.QUILIBRIUM_SIGNERS_IMAGE_NAME}}:latest \
        .
    status:
      - |
        docker image inspect \
        {{.QUILIBRIUM_SIGNERS_IMAGE_NAME}}:{{.QUILIBRIUM_SIGNERS_IMAGE_VERSION}} \
        >/dev/null 2>/dev/null

  build:docker:
    desc: Build the Quilibrium node binaries inside a Docker container.
    deps:
      - docker:build_image
    aliases:
      - build
    cmds:
      - |
        docker run \
        --rm -it \
        {{.QUILIBRIUM_SIGNERS_IMAGE_NAME}} \
        /bin/sh -c 'task build:local'

  build:local:
    desc: Build the Quilibrium node binaries, taged with platform and version.
    dir: ../node
    sources:
      - '**/*.go'
    generates:
      - node-{{.VERSION}}-*.bin
    cmds:
      - GOOS=darwin go build -ldflags "-s -w" -o node-{{.VERSION}}-darwin-arm64.bin
      - GOOS=linux GOARCH=amd64 go build -ldflags "-s -w" -o node-{{.VERSION}}-linux-amd64.bin
      - GOOS=linux GOARCH=arm64 go build -ldflags "-s -w" -o node-{{.VERSION}}-linux-arm64.bin

  digest:
    desc: Generate digests for node binaries.
    deps: [build]
    dir: ../node
    sources:
      - node-{{.VERSION}}-*.bin
    generates:
      - node-{{.VERSION}}-*.dgst
    cmds:
      - openssl sha3-256 -out node-{{.VERSION}}-darwin-arm64.dgst node-{{.VERSION}}-darwin-arm64.bin   
      - openssl sha3-256 -out node-{{.VERSION}}-linux-amd64.dgst node-{{.VERSION}}-linux-amd64.bin
      - openssl sha3-256 -out node-{{.VERSION}}-linux-arm64.dgst node-{{.VERSION}}-linux-arm64.bin

  sign:
    desc: Generate signatures for node binaries.
    deps: [digest]
    dir: ../node
    preconditions:
      - sh: 'test -n "$SIGNING_KEY_PATH"'
        msg: 'The path to the signing key must be set in SIGNING_KEY_PATH'
      - sh: 'test -n "$SIGNING_KEY_ID"'
        msg: 'The signing key id must be set in SIGNING_KEY_ID'
    sources:
      - node-{{.VERSION}}-*.dgst
    generates:
      - node-{{.VERSION}}-*.dgst.sig.{{.SIGNING_KEY_ID}}
    cmds:
      - openssl pkeyutl -sign -inkey {{.SIGNING_KEY_PATH}} -rawin -in node-{{.VERSION}}-darwin-arm64.dgst -out node-{{.VERSION}}-darwin-arm64.dgst.sig.{{.SIGNING_KEY_ID}}
      - openssl pkeyutl -sign -inkey {{.SIGNING_KEY_PATH}} -rawin -in node-{{.VERSION}}-linux-amd64.dgst -out node-{{.VERSION}}-linux-amd64.dgst.sig.{{.SIGNING_KEY_ID}}
      - openssl pkeyutl -sign -inkey {{.SIGNING_KEY_PATH}} -rawin -in node-{{.VERSION}}-linux-arm64.dgst -out node-{{.VERSION}}-linux-arm64.dgst.sig.{{.SIGNING_KEY_ID}}

  verify:build:
    desc: Verify that the existing binaries can be rebuilt exactly the same"
    dir: ../node
    cmds:
      - GOOS=darwin go build -ldflags "-s -w" -o node-tmp-darwin-arm64.bin
      - GOOS=linux GOARCH=amd64 go build -ldflags "-s -w" -o node-tmp-linux-amd64.bin
      - GOOS=linux GOARCH=arm64 go build -ldflags "-s -w" -o node-tmp-linux-arm64.bin
      - diff node-{{.VERSION}}-darwin-arm64.bin node-tmp-darwin-arm64.bin
      - diff node-{{.VERSION}}-linux-amd64.bin node-tmp-linux-amd64.bin
      - diff node-{{.VERSION}}-linux-arm64.bin node-tmp-linux-arm64.bin
      - task: verify:clean

  verify:digest:
    desc: Verify that the existing digests are correct.
    dir: ../node
    cmds:
      - openssl sha3-256 -out node-tmp-darwin-arm64.dgst node-{{.VERSION}}-darwin-arm64.bin   
      - openssl sha3-256 -out node-tmp-linux-amd64.dgst node-{{.VERSION}}-linux-amd64.bin
      - openssl sha3-256 -out node-tmp-linux-arm64.dgst node-{{.VERSION}}-linux-arm64.bin
      - diff node-{{.VERSION}}-darwin-arm64.dgst node-tmp-darwin-arm64.dgst
      - diff node-{{.VERSION}}-linux-amd64.dgst node-tmp-linux-amd64.dgst
      - diff node-{{.VERSION}}-linux-arm64.dgst node-tmp-linux-arm64.dgst
      - task: verify:clean

  verify:clean:
    desc: Remove temporary files created by various verify tasks.
    dir: ../node
    cmds:
      - rm node-tmp-*

  verify:
    desc: Verify all signatures.
    dir: ../node
    cmds:
      - |
        for i in {1..{{.MAX_KEY_ID}}}
        do
          if [ -f node-{{.VERSION}}-darwin-arm64.dgst.sig.$i ]
          then
            echo $i
            echo "node-{{.VERSION}}-darwin-arm64"
            openssl pkeyutl -verify -rawin -inkey {{.SIGNING_KEYS_PEM_DIR}}/$i.pem -pubin -sigfile node-{{.VERSION}}-darwin-arm64.dgst.sig.$i -in node-{{.VERSION}}-darwin-arm64.dgst
            echo "node-{{.VERSION}}-linux-amd64"
            openssl pkeyutl -verify -rawin -inkey {{.SIGNING_KEYS_PEM_DIR}}/$i.pem -pubin -sigfile node-{{.VERSION}}-linux-amd64.dgst.sig.$i -in node-{{.VERSION}}-linux-amd64.dgst
            echo "node-{{.VERSION}}-linux-arm64"
            openssl pkeyutl -verify -rawin -inkey {{.SIGNING_KEYS_PEM_DIR}}/$i.pem -pubin -sigfile node-{{.VERSION}}-linux-arm64.dgst.sig.$i -in node-{{.VERSION}}-linux-arm64.dgst
          else
            if [ -f node-{{.VERSION}}-linux-arm64.dgst.sig.$i ]
            then
              echo "$i is missing signatures"
            else
              if [ -f node-{{.VERSION}}-linux-amd64.dgst.sig.$i ]
              then
                echo "$i is missing signatures"
              fi
            fi
          fi
        done
    silent: true

